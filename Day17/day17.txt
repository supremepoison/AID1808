day16 回顾

生成器:
    生成器函数
        含有yield 语句的函数
            1.返回生成器对象(生成器对象也是可迭代对象)
            2.执行顺序与普通函数不同
                1)当next(it)函数调用时,生成器函数才执行
                2)当遇到yield语句时,保存当前函数的执行状态,将yield表达式结果返回给next(it)函数
                3)生成器的返回会触发 

            def myyield():
                yield 1
                yield 2

    生成器表达式:
        (表达式 for 变量 in 可迭代对象  if ....)

迭代工具函数
    zip(*iterables)
        zip([1,2,3], "abcde")
            (1, 'a')
            (2, 'b')
            (3, 'c')

    enumerate(iterable. start = 0)
    enumerate("ABC")
        (0, 'A')
        (1, 'B')
        (2, 'C')

    enumerate("ABC", 100)
        (100, 'A')
        (101, 'B')
        (102, 'C')

序列
    字节串 bytes
        不可变序列
        b'' b"" b'''''' b""""""
        b'hello'

    字节数组 bytearray
        可变的序列
    构造函数:
        bytearray()     生成一个空的字节数组,等同于b''
        bytearray(整型可迭代对象)   #用可迭代对象初始化一个字节数组
        bytearray(整数n)    生成n个值为0的字节数组
        bytearray(字符串, encoding = 'utf-8')   用字符数组的转换编码生成一个字节串 

    字节
        0(0b00000000) - 255(0b11111111)










day17笔记:


文件 File:
    什么是文件
        文件是用于数据存储的单位
        文件通常用于长期存储数据
        文件中的数据是以字节为单位进行顺序存储的

    文件的操作流程:
        1.打开文件
        2.读/写文件
        3.关闭文件

    文件的打开函数:
        open(file, mode = 'rt') 用于打开一个文件,返回此文件流对象,如果打开失败,则会触发OSError错误!
            file 是文件路径名的字符串
            mode 是打开的模式
                详见: python_base_docs_html/file.html

    文件的关闭方法:
        F.close()       # 关闭已经打开的文件,释放系统资源

        示例见:
            file_open.py

    文本文件的基本操作:
        读文件:
            F.readline()                #读取一行文字
            F.readlines()               #读取多行文字
            F.read(n)                   #读取n个字符
        写文件:
            F.write(字符串)              #写字符串到一个已经打开的文件
            F.writelines(字符串列表)      #写多个字符串到已经打开文件中

    exercise:
        put these data into data.txt

            xiaozhao 13888888888
            xiaoli 13999999999
            zhangsanfeng 010-88888888

        write a programe to read data from this file, print the name and the phone number 
        follow the format:
            name: xiaoli phone number : 1388888888

    文本文件读写时各操作系统的换行符问题:
        Linux换行符: '\n'
        Windows换行符: '\r\n'
        旧的Macintosh的换行符: '\r'
        新的Mac OS X 的换行符:  '\n'

    文本文件操作说明:
        文本模式下,各操作系统的换行符在读入python 内部时会自动转换为'\n'

    写文本文件的示例见:
        file_write.py

        打开模式:
            'r'	            以只读方式打开(默认)
            'w'	            以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
            'x'	            创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
            'a'	            以只写文件打开一个文件，如果有原文件则追加到文件末尾
            'b'	            用二进制模式打开
            't'	            文本文件模式打开 (默认)
            '+'	            为更新内容打开一个磁盘文件 (可读可写)

        练习:
            1.写一个程序,输入很多人的姓名,年龄,家庭住址,保存在文件infos.txt中
                (格式自定义,建议用空格或逗号分隔)
            如 info.txt
                小李 20 北京市朝阳区
                校长 18 上海市浦东新区
            2.写一个程序,读入infos.txt中的内容,
            如:
                姓名:校长,年龄20,住址: 北京市朝阳区

    文件的迭代读取
        文件流对象是可迭代对象,迭代过程以换行符'\n'作为分隔符依次获取
        如:
            f = open('infos.txt')
            for line in f:
                print(line)

    二进制文件操作:
        模式字符: 'b'
        默认文件中存储的都是以字节为单位的数据，通常有人为的格式
        对二进制文件的读写需要用字节串(bytes) 进行操作

        常用的操作方法:
        
        F.read([字节数/字符数])
            对于文本文件, F.read()返回类型为字符串str
            对于二进制文件,F.read()返回类型为字节串bytes

        F.write()
            同上,对于二进制文件，写入的数据为字节串bytes或bytearray

        
        F.tell() 方法
            返回当前文件流的绝对位置(从0开始,以字节为单位)
        示例见:
            tell.py


        F.seek方法
        作用:
            设置文件的读写位置
        格式:
            F.seek(偏移量, whence=相对位置)
            偏移量
                大于0代表向文件尾方向移动
                小于0代表向文件头方向移动
            相对位置
                0 代表从文件头开始偏移
                1 代表从当前位置开始偏移
                2 代表从文件尾开始偏移
        示例见:
            seek.py

        F.flush()   清空缓存区



        标注输入输出文件:
            sys.stdin   标准输入文件(默认为键盘)
            sys.stdout  标准输出文件(默认为屏幕终端)
            sys.stderr  标注错误输入文件(默认为屏幕终端)

        标准文件不需要打开和关闭,可以直接使用
            模块名: sys
            示例见:
                stdin.py



        汉字编码(只讲两种)
        问题:(10_chinese_utf8.txt)
            十个汉字占多少个字节?
            20个(GBK编码)
            30个(UTF-8编码)

        汉字编码:
            国标编码:
                GB18030(二字节或四字节编码, 27533个字)
                GBK(二字节编码 21003个字)
                GB2312(二字节编码 6763个字)
                        (Windows上常用)
        国际标准:
            UNICODE  <---> UTF-8
                Unicode 16
                    Unicode 32
        (Linux / Mac OS X / IOS / Android常用)

        UTF-8 (8-bit Unicode Transformation Format)



        python的编码(encode)字符串:
        'gb2312'
        'gbk'
        'gb18030'
        'utf-8'
        'ascii'


        编码注释:
        在源文件中第一行或第二行写入如下内容为编码注释

        # -*- coding:gbk -*-
        # 设置源文件编码格式为:gbk
        或
        # -*- coding:utf-8 -*-
        # 设置源文件编码格式为:utf-8

        作用:
            告诉解释执行器，当前的.py文件的编码格式是什么

 写程序，实现复制文件功能
    要求:
      1) 源文件路径和目标文件路径需手动输入
      2) 要考虑关闭文件问题
      3) 要考虑超大文件复制问题
      4) 要能复制二进制文件(如:/usr/bin/python3 等文件)





