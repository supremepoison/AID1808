Day06笔记


for 语句：
    作用：
        用来遍历可迭代对象的数据元素

    可迭代对象：
        字符串  str
        列表    list
        元组    tuple
        字典    dict
        集合    set
        ....

    语句：
        for 变量列表 in 可迭代对象：
            语句块1（重复执行）
        else:
            语句块2
    说明：
        else 子句可以省略（同while类似）
        当在循环内部用break终止循环时，else子句部分的语句不会执行
    示例见：
        for.py
    练习：
        任意输入一段字符串
        1）计算这个字符串的‘a’这个字符串的个数并打印出来
        2）计算出空格的个数并打印出来
        （要求：用for语句实现，不允许使用S.count方法）
    

range 函数：
    作用：
        用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
    函数 说明：
        range(stop)  用来生成0-stop 之间内的整数，直到stop为止（不包含stop)

        range(start, stop[,step])  用来生成 start-stop 之间的整数，
        直到stop为止（不包含stop),每个整数间隔step,且step可以是负数

    说明：
        此对象可用于for语句来进行迭代取出其中的元素
    示例:
        range(4)                # 0 1 2 3
        range(3,6)              #3 4 5 
        range(1, 10, 2)         #1 3 5 7 9 
        range(5, 0, -2)         #5 3 1 

    range 示例见：
        range.py

    练习：
        1.用for语句 打印 1 - 20 的整数打印在一行内.
        2.用for语句 打印 1 - 20 的整数，每行打印5个， 打印4行.
        3.求100 以内有那些触与自身+1的乘积再对11求余结果等于8
            x * (x + 1) % 11 == 8
        4.输入一段字符串，判断您输入的字符串中有几个中文字符：
            （注：中文自读的编码值一定大于127）
        见 range.py

    for语句的注意事项：
        1.for 语句的 range 调用顺序：
            示意：
            请问此程序打印的结果是什么？
            i = 6
            for x in range(1,i):                    #range 函数只调用一次
                print("x= ", x, "i= ", i)           #此 print 函数 会执行 5次
                i -= 1
        
        2. for 语句变量列表里的变量可能不被创建
            
            for x in range(4, 0):
                print(x)
            esle:
                print("循环结束后x的值是"， x)          #报错

        3.for语句中用break语句中断执行时，else子句不会执行
            示例见：   
                for x in range(10):
                    print(x)
                    if x == 3:
                        break
                else:
                    print("for语句结束")
    

    for 语句的嵌套：
        for x in "abc":
            for y in "123"
             print(x+y)

        练习：
            写一个程序，打印26个大写英文字母和26个小写英文字母    chr(i)



    continue 语句:
        问题：
            如何让程序不在向下执行本次循环，重新开始一次新的循环

        作用：
            用于循环语句中（while， for语句）中，不再执行本次循环内continue之后的语句，
            重新开始一次新的循环
        说明：
            1.在for语句中执行continue语句，将会从可迭代对象中取下一个数据，
             绑定变量后开始一次新的循环
            2. 在while语句中，执行continue语句，将会直接跳转到while语句真值表达式处，
                重新判断循环条件
        语法：
            continue
        示例见：
            continue.py
            test_continue.py

        练习：
            1.输入一个整数，代表开始用 begin绑定
              输入一个整数，代表结束用end 绑定
              打印 begin——end （不包含end） 之间的全部奇数

            2. 求1-100 之间所有不能被2， 3， 5， 7整除的数，
               a.打印出这些数
               b.并计算和 

循环小节：

    while       语句
    for         语句
        字符串 str
        range（） 函数返回的对象  

    break       语句
    continue    语句







列表 list:
    问题：

    列表的定义：
        1.列表是一种容器
        2.列表是可以被改变的序列
        3.列表是由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，
          但是他们之间有先后顺序的关系

    python3 中序列的类型 （sequence）
        字符串          str
        列表            list
        元祖            tuple
        字节串          bytes
        字符数组        bytearray

    创建空列表的字面值：
        []      #创建空列表的表达式

    创建非空列表的字面值：
        l = [1, 2, 3, 4]
        l = ['上海'， ‘北京’ ， ‘深圳’]
        l = [1， ‘Two’，3.14， ‘四’]
        l = [1, 2, [3.1 3.2], 4]

    构造函数来创造列表： list
        list()      #生成一个空的列表  等同与[]
        list(iterable)  可用迭代对象创建一个列表
        示例：
            L = list()              # L 绑定空列表[]
            L = list("hello")       # L 绑定['h', 'e', 'l', 'l', 'o']
            L = list(range(5,10))   # L = [5,6,7,8,9,]    

    列表的运算：
        算数运算：
            +   +=  *   *=
        +   用于拼接列表
            lx = [1,2,3]
            ly = [4,5,6]
            lz = lx + ly        #[1,2,3,4,5,6]
        +=  用原列表与右侧列表拼接，再用变量绑定新列表(体现列表的可变性)
            语法：
                L += 可迭代对象
            示例：
                 L = [1,2,3]
                 L += [4,5,6]       # L = [1,2,3,4,5,6]
                 L += [ABC]         # L = [1,2,3,4,5,6, 'A', 'B', 'C']
                 L += range(10,15)  # L = [1,2,3,4,5,6, 'A', 'B', 'C', 10, 11, 12, 13, 14]
        * 用于生成重复的列表
            x = [1,2] * 3           #x = [1,2,1,2,1,2]
        *= 用原列表生成重复列表，并用变量绑定生成的列表
            x = [1,2,3]
            x *= 2              # x =[1,2,3,1,2,3]

        列表的比较：
            运算符：
                < <= > >= == !=
            说明：
                列表的比较规则与字符串的比较规则相同
                列表要求每两个元素能依次进行比较，否则会出现类型错误
            示例： 

                x = [1, 2, 3]
                y = [1, 3, 2]
                x < y       #True
                x != y      #True
                [1, 'two'] > ['two', 1]             #TypeError
                [1, 'two'，3.14] < [1, '二', 1]     #True

    列表是可迭代对象
        L = [1, 3, 5, 7]
        for x in L:
            print(x)        # 1 3 5 7 

        练习：
            1.写一个程序， 让用户输入很多个正整数，当输入负数时结束输入
                a.将用户输入的数存在于列表 L 中
                b.打印这个列表
                如：
                    请输入：1
                    请输入：2
                    请输入：3
                    请输入：4
                    请输入：-1
                打印：
                    [1,2,3,4]

    列表 in  / not in 运算符
        判断一个值是否存在于列表中，如果存在返回True，否则返回False
        说明：
            同字符串的in/not in 类似，但只能判断单个元素是否存在于列表中
        示例： 
            x = [1, 'Two', 3， "Four"]
            3 in x      #True
            "3" in x    #False
            4 not in x  # True 

    列表的索引操作：
        语法：
            列表[整数表达式]
        用法：
            等同于字符串的索引
            索引分为正向索引和反向索引，规则和字符串规则完全相同

        示例： 
            x = [1, "二", 3, 'Four']
            print(x[0])      # 1
            print(x[1])      # 二
            print(x[-1])     # Four

    列表的索引赋值操作：
        列表是可变的序列，可以通过索引赋值改变列表中的而元素
        语法：
            列表[整数表达式] = 表达式
        示例： 
            x = [1, "二", 3, 'Four']
            x[1] = 2        #将列表的第二个元素改为2
            x[-1] = 4
            print(x)        #[1, 2, 3, 4]

    列表的切片：
        语法：
            列表[开始索引b : 结束索引（：(步长)）]
        说明：
            列表切片取值返回一个列表，规则等同于字符串规则
        示例： 
            x = [0,1,2,3,4,5,6,7,8]
            y = x[1:9:2]    # 奇数 [1， 3， 5， 7]

    切片的赋值操作：
        作用：
            可以改变原列表的排序，可以插入和修改数据
            可以用切片改变列表对应元素的值
        语法：
            列表[切片] = 可迭代对象
        注：赋值运算符的右侧必须是一个可迭代对象
        示例： 
            L = [2.2, 3.3, 4.4]
            L[0:1]=[1,2]            #L = [1, 2, 3.3, 4.4, 5.5] 
            L[2:] = [3,4,5]         #L = [1, 2, 3, 4, 5 ]
            L[:] = [30, 40]         #L = [30, 40]
            L[0:0]= [10, 20]        #L = [10, 20, 30, 40]

            L = [3, 4]
            L[1:1] = [3.1, 3.2]     #L = [3, 3.1, 3.2, 4]

            L = [3, 4]
            L[2:2] = [5,6]          #L = [3, 4, 5, 6]
            
            L = [3, 5]
            L[1:1] = 'AB'           #L = [3, 'A', 'B', 5]

            L = [3, 5, 10]
            L[1:2] = range(4,10)    #L = [3, 4, 5, 6, 7, 8, 9, 10]
            L[1:7] = []             #L = [3,10]    

        切片注意事项：
            对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的元素个数一定要等于切片切出的段数：
            如：
                L = [1, 2, 3, 4, 5, 6]
                L[::2] = 'ABC'  #对的
                L[::2] = 'ABCD' #错的

    练习：
        1.写程序 输入一个三角形的宽和高 打印相应的三角形
            如：
                输入3
                1） 
                *
                **
                ***
                2） 
                  *
                 ** 
                ***
                3)
                ***
                **
                *
                4)
                ***
                 **
                  *
        2. 写程序，任意输入一个整数，判断这个数是否为素数(prime)
            素数（也叫质数），只能被1和自身整除的正整数
                如：2 3 5 7 11 13 17...
            提示：
                用排除法 ： 当判断x是否为素数时，只要让x分别除2,3,4,5，...x-1，只要有任何一个数能， 则说明x不是素数，否认为x素数

        3.
            编写程序求下列多项式的值：
                Sn = 1/1 -1/3 + 1/5 - 1/7+ ....
                1)求1000000个这样的分数相加的值是多少？
                2）将上一步的值乘以4打印出来，是多少？
        4.算出 100-999之间的水仙花数        



