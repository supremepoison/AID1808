day10 笔记



函数的参数:
    1.函数调用实际传递参数(把数据给函数)
    2.函数的形式参数(从调用者拿来的数据)

    函数的实际调用参数传递
        传递方式:
            1.位置传参
                1.1 系列传参
            2.关键字传参
                2.1字典关键字传参

    位置传参:(position argument)
        实际参数(实参)的对应关系与形式参数(形参)的对应关系是按位置来依次对应的
        
        示例:
            def mymin(a,b,c):
                pass
            #         ^ ^ ^
                mymin(1,2,3)
        说明:
            实参个数必须与形参个数相同
        示例见:
            position_give_args.py
    
    序列传参:
        序列: 字符串,列表,元祖
        序列传参是指在函数调用过程中,用*(星号)将序列拆解后按位置进行传递的传参方式
        示例见:
            sequence_give_args.py
        说明:
            序列传参时,序列拆解的而为之将与形参一一对应
            序列的位置信息对应相应的参数位置

    关键字传参:
        关键字传参是指传参时,按着形参的名称给形参赋值
        实参和形参按名称进行匹配
        示例见:
            keywords_give_args.py
        说明:
            实参和形参可以不按位置进行匹配

    字典关键字传参:
        是指实参为字典, 将字典用**(双星号) 拆解后进行关键字传参的传参方式
        示例见:
            dict_keywords_give_args.py

        说明:
            字典的键名和形参名必须一致
            字典的键名必须是字符串,且必须为标识符的命名规则
            字典的键名要在形参中存在

    函数综合传参
        函数的传参方式,在能确定形参能唯一匹配到相应实参的情况下可以任意组合
        函数的位置传参要先于关键字传参
    
        1.函数的位置传参和序列传参可以混合使用,可以顺序颠倒
            myfun1(100, *[200,300])
            myfun1(*[100,200],300 )
            myfun1(*[100],200,*[300] )
        2.函数位置传参和关键字传参可以混合使用
            myfun1(100,c=300,b=200)
            myfun1(100, **{"c":300}, b=200)











---------------------以下将的函数的定义以及函数的形参-------------------------------

函数的缺省参数:(default argument)
    语法:
        def 函数名(形参名1=默认实参1, 形参名2=默认实参2,....):
            语句块
    示例见:
        default_args.py

    说明:
        1.缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则其右侧的所有参数都必须有缺省参数
        2.缺省参数可以有0个,1个或多个,甚至全部都是缺省参数
    示例:
        def fn(a, b = 10 ,c):           # wrong
            pass
        def fn(a=0, b=10, c=20):        #   right
            pass

    练习:(test_default_args.py)
        写一个函数myadd(),此函数可以计算两个数,三个数,四个实参的和

函数形参的定义方式:
    位置形参                    def f1(a,b,c)
    星号元祖形参                 def f1(a, b, *args)
    命名关键字形参               def f1(a, *args, c)
    双星号字典形参               def f1(a, *args, c, **kwargs)

    位置形参:
        语法:
            def 函数名(形参1,形参2...)
                语句块

    星号元祖形参:
        语法:
            def 函数名(* 元祖形参名):
                语句块
        作用:
            收集多余的位置传参
        说明:
            元祖形参名一般命名为 'args'
        示例: 
            star_tuple_args.py

        练习:(test_star_tuple_args.py)
            1.写一个函数,mysum 可以传入任意个实参的数字,返回实参的和
            2.写一个函数min_max() 
                此函数至少要传一个参数,并返回全部这些数的最小值,最大值,(形成元祖,最小在前,最大在后)
                调用此函数,得到最小值和最大值并打印出来

    命名关键字形参:
        语法:
            def     函数名(*,命名关键字形参1,命名关键字2,...):
                语句块
            #   或
            def     函数名(*args, 命名关键字形参1,命名关键字2,...):
                语句块
            
        作用:
            强制所有的命名关键字形参都必须用关键字传参或字典关键字传参
        示例见:
            named_keyword_args.py

    双星号字典形参:
        语法:
            def 函数名(**字典形参名):
                语句块
        作用:
            收集多余的关键字传参
        说明:
            字典形参名一般命名为"kwargs"
        示例见:
            dict_keywords_args.py


    函数的参数说明:
        位置形参,星号元祖形参,命名关键字形参,双星号字典形参,缺省参数可以混合使用

    函数参数自左至右的顺序为:
        位置形参
        星号元祖形参
        命名关键字形参
        双星号字典形参

    示例:
        def fn(a, b, *args, c, d, **kwargs):
            return a, b, *args, c, d, **kwargs
        fn(1,2,3,4,5, c = 'C', d= 'D', e= 'E')

    #可以接受任意的位置传参和关键字传参的函数:
        def fn(*args, **kwargs):
            print('args=', args)
            print('kwargs=', kwargs)
        fn(1,2,*'abc', **'avd')

    练习:
        查看 
        >>>Help(print)
        猜想print() 函数是形参列表如何定义的?

    练习:(myrange.py)
        写一个 myrange函数,参数可以传入1-3个,实际含义与range函数相同
        此函数返回符合range(...)函数的列表
        如:
            L = myrange(4)
            print(L) #[0,1,2,3]
            L = myrange(4,5)
            print(L) #[4,5]
            L = myrange(1,10,3)
            print(L) #[1,4,7]
            注:可以调用range




全局变量和局部变量:
    局部变量:(local variable))
        1.定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
        2.局部变量只能在函数内部使用
        3.局部变量在函数调用时才能被创建,在函数调用之后会被自动销毁

    全局变量:(global variable)
        1.定义在函数外部,模块内部的变量称为全局变量
        2.全局变量所有函数都可以直接访问(但不能直接将其赋值)

    示例见:
        global_local.py

    说明:
        1.在函数内部的赋值语句会创建局部变量,不会对全局变量造成影响
        2.局部变量只能在其被声明的函数内部访问,而全局变量可以在整个模块范围内访问
    
    globals()       /       locals() 函数
        globals()   返回当前全局作用域内变量的字典
        locals()    返回当前局部作用域内变量的字典

    示例见:
        globals_locals.py


    作业:
        1.写一个函数叫isprime(x) 判断x是否是素数 如果是素数,返回True,否则返回False
        2.写一个函数prime_m2n(m, n) 返回从m开始,到n结束的范围内的素数 不包括(n), 返回这些素数的列表,并打印
            如:
                L= prime_m2n(5, 10)
                print(L) #[5,7]
        3.写一个函数primes(n), 返回指定范围n以内的素数,不包含n ,的全部素数的列表,并打印这些素数
        1) 打印 100 以内的全部素数
        2) 打印200 以内的全部素数的和
        4.改写之前的学生信息管理程序:
            改为用两个函数实现
            1)写函数input_student()来获取学生信息,
            当输入姓名为空时结束输入,形成字典组成的列表并返回
            2)写函数print_student(L) 将上述函数得到的打印成表格显示






        











    