Day09笔记:





集合 set:

    集合是可变的容器
    集合内的数据都是唯一的(不能重复多次的)
    集合是无序的存储结构,集合中的数据没有先后关系
    集合内的元素必须是不可变对象
    集合是可迭代对象
    集合是相当于只有键没有值的字典(键则是集合的数据)

    创建空集合:
        set()
    创建非空集合:
        s = {1,2,3}
    集合的构造函数 set
        set()           创建一个空的集合对象(不能用{}来创建空集合)
        set(iterable)   用可迭代对象创建一个新的集合对象

    示例:
        s = set()   #空集合
        s = {3,5,7,9}
        s = set("ABC")      #{'A', 'B', 'C'}
        s = set("ABCCBA")   #{'A', 'B', 'C'}
        s = set({1:'一', 2:'二', 3:'三'})
        s = set([1,2.0,3.14, True])
        s = {True, None, 'ABC', (1,2,3)}

    集合的运算:
        交集        &
        并集        |
        补集        -
        对称补集     ^
        子集        <
        超集        >

        交集        &   生成两个集合的交集
        s1 = {1,2,3}
        s2 = {2,3,4}
        s3 = s1 & s2    #s3 = {2,3}


        并集        |   生成两个集合的并集
        s1 = {1,2,3}
        s2 = {2,3,4}
        s3 = s1 | s2    #s3 = {1,2,3,4}

        补集        -   生成两个集合的补集
        s1 = {1,2,3}
        s2 = {2,3,4}
        s3 = s1 - s2    #s3 = {1} 
        注:生成属于s1,但不属于s2的所有元素的集合

        对称补集     ^  生成两个集合的对称补集
        s1 = {1,2,3}
        s2 = {2,3,4}
        s3 = s1 ^ s2    #s3 = {1,4}         #(s1 | s2) - (s1 & s2)

        子集        <   判断一个集合是另一个集合的子集
        超集        >   判断一个集合是另一个集合的超集
        s1 = {1,2,3}
        s2 = {2,3}
        s1 > s2     #True       s1 为 s2的超集
        s2 < s1     #True       s2 为 s1的子集

        ==  /  !=   判断集合相同/不同
            s1 = {1,2,3}
            s2 = {3,2,1}
            s1 == s2    #True
            s1 != s2    #False

        >=  /   <=  略

        in  /   not in 运算符
            等同于列表的in运算符,用于判断一个元素是否存在与集合中.如果存在返回True,否则返回False
            not in 与 in 相反

            if 2 in {1,2,3}:
                print("2在{1,2,3}内')

    用于集合的函数:
        len(x)         返回集合的个数
        max(x)         返回集合最大值
        min(x)         返回集合最小值
        sum(x)          返回集合中所有键的和
        any(x)          真值测试,如果集合中其中一个为真值则返回True
        all(x)          真值测试,如果集合中全部为真值才返回True

    练习:
        经理有: 曹操,刘备,孙权
        技术员有: 曹操,孙权,张飞,关羽
        用集合求:
            1.是经理也是技术员的人有谁?
            2.是经理,但不是技术员的人有谁?
            3.是技术员,但不是经理的人有谁?
            4.张飞是经理吗?
            5.身兼一职的人有谁?
            6.经理和技术员共有几个人?

    集合常用的方法:
        文档参见:
        python_base_docs_html/set.html 

        S.add(e) 	                                在集合中添加一个新的元素e；如果元素已经存在，则不添加
        S.remove(e) 	                            从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误
        S.discard(e) 	                            从集合S中移除一个元素e,在元素e不存在时什么都不做;
        S.clear() 	                                清空集合内的所有元素
        S.copy() 	                                将集合进行一次浅拷贝
        S.pop() 	                                从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常
        S.update(s2) 	                            等同于 s2 来更新S,去掉重复

        S.difference(s2) 	                        S - s2 补集运算，返回存在于在S中，但不在s2中的所有元素的集合
        S.difference_update(s2) 	                等同于 S -= s2
        S.intersection(s2) 	                        等同于 S & s2
        S.intersection_update(s2) 	                等同于S &= s2
        S.isdisjoint(s2) 	                        如果S与s2交集为空返回True,非空则返回False
        S.issubset(s2) 	                            如果S与s2交集为非空返回True,空则返回False
        S.issuperset(...) 	                        如果S为s2的子集返回True,否则返回False
        S.symmetric_difference(s2) 	                返回对称补集, 等同于 S ^ s2
        S.symmetric_difference_update(s2) 	        等同于 S ^= s2, 用 S 与 s2 的对称补集更新 S
        S.union(s2) 	                            生成 S 与 s2的全集, 等同于 S

    集合是可迭代对象:
        s = {1,2,3}
        for x in s:
            pass 
        L = [x**2 for x in s]

    集合推到式:
        集合推到式是用可迭代对象创建集合的表达式

        语法:
            {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
            注:
                []里面的内容可省略
        示例:
            s = 'ABC'
            s2 = {x for x in s}     #s2 = {'A', 'B', 'C'}
    
推到式小结:
    三种:
        列表推导式      [x for x in L if ...]
        字典推到式      [k : v**2 for x in L if ...]
        集合推到式      {x for x in L if ...}


固定集合    frozenset
    固定集合是不可变的,无序的,含有唯一元素的集合

    作用:
        固定集合可以作为字典的键,也可以作为集合的值

    固定集合的构造函数:
        frozenset()             创建一个空的固定集合对象
        frozenset(iterable)     用可迭代对象创建一个固定集合对象

    示例:
        fs = frozenset()        #创建空固定集合
        fs = frozenset("ABCCBA")    #fs = frozenset({'C', 'B', 'A'})
        fs = frozenset(range(10))
        fs = frozenset({1,2,3})
        s = {frozenset({1,2,3}),100,200}

    固定集合的运算:
        交集        &
        并集        |
        补集        -
        对称补集     ^
        子集        <
        超集        >
        >=  /   <=
        ==  /   !=
        in  /   not in
        (以上运算符与 set 相同)

    固定集合的方法:
        相当于集合的全部方法去掉修改集合方法:
            详见:
            help(frozenset)
            







     












            







































