day10回顾:
    实参    ------>     形参

参数传递:
    位置传参:
        序列传参(*序列)
    关键传参:
        print(1, 2, 3, sep='#')
        字典关键传参(**字典)

    位置传参在前, 关键传参在后

形参有4种:
    1.位置形参
    2.*元祖形参(接受多余的位置传参:*args)
    3.命名关键字形参(强制使用关键字传参)        #def fn(a, b, *, c, d) 四个形参
    4.**字典形参(接受多余的关键字传参:**kwargs)

缺省参数:
    自右至左依次有
        def fx(a, b =0, *, c=0,d=0)
            pass

全局变量:

局部变量:
    函数内部创建的变量是局部变量

globals()       收集全局变量的值形成一个字典
locals()        









Day11 笔记


函数变量
    函数名是变量,他在创建时绑定一个函数
    
        示例见:
            function_variable.py

        一个函数可以作为另一个函数的实参传递
            示例见: 
            function_as_args.py
    
        观察下面函数的执行结果是什么?
            def goodbye(L):
                for x in L:
                    print("再见:",x)

            def hello(L):
                for x in L:
                    print("您好:",x)

            def fx(fn,L):
                fn(L)
            fx(goodbye, ["Tom","jerry", "Spike"])

        看懂如下代码:
            def　myinput(fn):
                L = [1,3,5,7,9]
                r = fn(L)
                print(r)
                return r 
            print(myinput(max))
            print(myinput(min))
            print(myinput(sum))



函数可以作为另一个函数的返回值：
    示例见：
        return_function.py



函数的嵌套定义:
    函数嵌套定义是指一个函数里用def语句来创建其他函数的情况:
        示例:
        function_embed.py
            def fn_outter():
            print("fn_outter")


    
python 的作用域:
    作用于也叫命名空间,是访问变量时查找变量名的范围空间

    python的四个作用域:
            作用域                      英文                       英文简写

        局部作用域(函数内)          Local                               L
        外部嵌套函数作用域          Enclosing function local            E
        函数定义所在模块作用域       Global                              G        
        python内建模块的作用域      Builtin(python)                     B

    示例见:
        namespace.py

    变量名的查找规则:(变量只有作用域,对象没有作用域)
            在范文变量时,先查找本地变量,然后是包裹 此函数外部的函数内部的变量,之后是全局变量,最后是内建变量
                即 L--> E--> G--> B
            在默认的情况下,变量名赋值会创建或者改变本地作用域内的变量

    练习:
        得出下列程序运行的结果,思考为什么?
        l = [1, 2]
        def f1():
            l = [3, 4, 5]
        f1()
        print(l)

        def f2():
            l +=[3,4,5]
        f2()
        print(l)

        def f3():
            l[:] = [3,4,5]
        f3()
        print(l)
    
global 语句

    作用:
        告诉解释执行器,global 语句声明的一个或多个变量,这些变量的作用域为模块级作用域(也称作全局变量)
        全局声明(global) 将赋值语句的变量映射到 模块文件内部的作用域
    
    语法:
        global 变量1, 变量2, ...
    示例见:
        global.py
    说明:
        1.全局变量如果要在函数内部被赋值,则必须经过全局声明,否则会被认为是局部变量
        2.全局变量在函数内部不经过全局声明就可以访问(取值)
        3.不能先声明局部变量,再用global声明为全局变量,此做法不符合规则
        4.global变量列表里的变量名不能出现在函数的形参列表里

    练习:
        写一个函数hello,部分代码如下:
            count = 0
            def hello(name):
                print("您好",name)
                ...
            当调用hello 函数时,全局变量count自动加1操作来记录hello被调用的次数
        如:
            hello("To")
            hello("jerry")
            print("hello函数共被调用%d次" % count)

nonlocal 语句
    作用:
        告诉解释执行器,nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量
    语法:
        nonlocal 变量名1, 变量名2
    示例见:
        nonlocal.py

    说明:
        1.nonlocal语句只能在被嵌套函数的内部进行使用
        2.对nonlocal变量进行赋值操作,将对外部嵌套函数作用域内的变量进行操作
        3.当有两层或两层以上的函数嵌套时,访问nonlocal变量只对最近的一层的变量进行操作
        4.nonlocal语句变量列表里的变量名,不能出现在此函数的形参列表中

lambda 表达式(匿名函数)
    作用:
        创建一个匿名函数对象,同def类似,但不提供函数名
    语法:
        lambda[函数形参列表]:表达式
    示例见:
        lambda.py
    说明:
        1.lambda 表达式创建的函数只能包含一条表达式且直接返回表达式的值
        2. lambda 比函数简单,且可以随时创建和销毁,有利于减少程序的耦合度(关联的复杂程度)
        
    练习:
        1.写一个lambda表达式
            fx  = lambda n :
            此表达式创建的函数判断n这个数的2次方+1能否被5整除,如果能返回True,否则返回False
        2.写一个lambda表达式来创建函数,此函数返回两个形参变量的最大值
            def mymax(x,y):

            mymax = lambda...
            print(mymax(100,200))
            print(mymax("ABC", "123"))




eval() 和 exec() 函数

eval 函数
    作用:
        把一个字符串当表达式来执行,返回表达式执行后的结果
    格式:
        eval(source, global =None, local = None)
    示例:
        s = '1 + 2 * 3'
        v = eval(s)
        print(v)        v=7
        
        x = 100
        y = 200
        s = "x+y"
        v = eval(s)     v=300
    示例见:
        eval.py

exec 函数
    作用:
        把一个字符串当程序来执行
    格式:
        exec(source, global =None, local = None)
    示例:(exec.py)
        s = 'x=100\n y=200\n print('x+y',x+y)'
        exec(s)
        x = "print(x+y)\nprint(z*y)"
        exec(x)

练习:
    1. 看懂下面的程序在作甚
        def fx(f, x ,y):
            print(f(x,y))
        fx((lambda a,b: a+b), 100, 200)
        fx((lambda a,b :a**b),3,4)

    2.给出一个整数n,写一个函数来计算
        1+2+3+4+...+n  的值并返回结果
        要求用函数来做
        如:
        def mysum(n):
        ...    
        print(mysum(100))
        print(mysum(10))

    3.给出一个整数n,写一个函数来计算n!(n的阶乘)
        n!= 1*2*3*4...*n
        def myfac(n):
            ....
        print(myfac(5))     #120
    
    4.给出一个整数n,写一个函数来计算
        1+2**2+3**3+...n**n
    5.写程序打印杨辉三角(6层)
         1
        1 1
       1 2 1
      1 3 3 1
     1 4 6 4 1  
    1 5 10 10 5 1

    6.实现带界面的学生信息管理系统的项目:
    +-------------------------------------+
    | 1) 添加学生信息                       |
    | 2) 显示学生信息                       |
    | 3) 删除学生信息                       |
    | 4) 修改学生信息                       |
    | q) 退出                              |
    +-------------------------------------+
    (要求用函数来实现,每个功能写一个函数写值相对应)

































