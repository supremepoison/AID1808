Day07  笔记



列表:


    向列表内添加数据
        L[0:0] = [100:200]
    修改数据:   
        L[1]= 300
        L[1:5] = [1,2,3]
    删除数据:
        L[1:5] = []

    del 语句
        用于删除列表的元素
        示例:
            del L[2]        #删除单个袁术
            del L[::2]      #删除切片切出来的部分

    练习:(list_index.py)
        已知有列表:
            L = [3.5]
        用索引的切片等操作,将原列表的改变为:
            L = [1,2,3,4,5,6]
        将列表反转,删除最后一个元素后,打印此列表:
            print(L)    #[6,5,4,3,2]
    

    python3 中常用序列的函数:
        len(x)      返回序列长度
        max(x)      返回序列的最大值元素
        min(x)      返回序列的最小值元素
        sum(x)      返回序列中所有元素的和(元素必须是数值类型)
        any(x)      真值测试,如果序列中其中一个值为真值则返回True
        all(x)      真值测试,如果列表中所有值为真值才返回True

    示例:
        L = ['One', 2, '三']
        print(len(L))           #   3
        L = [8,3,6,2]
        min(L)                  #2
        sum(L)                  #19
        any(L)                  #True
        all(L)                  #True
        L = [8,3,6,2,1,0]
        all(L)                  #False

    练习:(list_max_min.py)
        1.输入三个数,存于列表中,打印出这三个数的最大值,最小值和平均值
        2.写程序,额昂用户循环输入一些整数,当输入 -1时,结束输入,将这些整数存于列表中
            1)打印您共输入了几个有效的数
            2)打印您输入的数的最大值是多少?
            3)打印您输入的数的平均值是多少?

    python3中常用的列表的方法   (methond)
        文档参见:
            pbase_doc_html/list.html
            L.index(v [, begin[, end]]) 	返回对应元素的索引下标, begin为开始索引，end为结束索引,当 value 不存在时触发ValueError错误
            L.insert(index, obj) 	        将某个元素插放到列表中指定的位置
            L.count(x) 	                    返回列表中元素的个数
            L.remove(x) 	                从列表中删除第一次出现在列表中的值
            L.copy() 	                    复制此列表（只复制一层，不会复制深层对象)
            L.append(x) 	                向列表中追加单个元素
            L.extend(lst) 	                向列表追加另一个列表
            L.clear() 	                    清空列表,等同于 L[:] = []
            L.sort(reverse=False) 	        将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
            L.reverse() 	                列表的反转，用来改变原列表的先后顺序
            L.pop([index]) 	                删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系

深拷贝和浅拷贝:
    浅拷贝: shallow copy    
        浅拷贝是指在对象复制过程中,只复制议程变量,不会复制深层变量绑定的对象的复制过程
    如:
        L = [3.1, 3.2]
        L1 = [1, 2, L]       
        L2 = L1.copy()      #浅拷贝
        print(L1)           #[1,2,[3.1],[3.2]]
        print(L2)           #[1,2,[3.1],[3.2]]

        L[0] = 3.14
        print(L1)           #[1,2,[3.14],[3.2]]
        print(L2)           #[1,2,[3.14],[3.2]] 
        print(L)            #[3.14, 3.2]

    深拷贝: deep copy
        import copy         #导入复制模块

        L = [3.1, 3.2]
        L1 = [1, 2, L]       
        L2 = copy.deepcopy(L1))      #深拷贝
        print(L1)           #[1,2,[3.1],[3.2]]
        print(L2)           #[1,2,[3.1],[3.2]]

        L[2][0] = 4.0
        print(L1)           #[1,2,[3.1],[3.2]]
        print(L2)           #[1,2,[4.0],[3.2]] 
        print(L)            #[3.14, 3.2]


列表与字符创比较:
    1.都是序列,元素之间有先后顺序关系
    2.列表和字符串都是可迭代对象
    3.字符串不可变的序列,列表是可变的序列
    4.字符串中每个元素只能存储字符(编码), 列表可以存储任意类型的元素

字符串文本解析方法: split  join
    S.split(sep = None) 将字符串,使用sep作用分隔符分割 S字符串,返回分割后的字符串列表.当不给定参数时,用空白字符作用分隔符分隔
    S.join(iterable)    用可迭代对象中的字符串中,返回有个中间用S进行分割的字符创

    示例:
        s = "Beijing is cipital"
        L = s.split('')     #L = ['Beijing', 'is', 'capital'] 

        L = ['aaaa', 'bbbb', 'cccc']
        s2 = "#".join(L)    #s2 = "aaaa#bbbb#cccc"

    练习:(split_join.py)
        有字符串
            s= 'hello'
        请生成如下字符串:
            'h e l l o' 和 'h-e-l-l-o'

列表推导式 list comprehension:
    列表推导式是可用迭代对象创建列表的表达式

    作用:
        用简易方法生成列表
    语法:
        [表达式 for 变量 in 可迭代对象]
        或
        [表达式 for 变量 in 可迭代对象 if 真值表达式]


        [表达式 for 变量 in 可迭代对象]
    示例:
        #以下生成一个数值为1-9的平方的列表
        #[1,4,9,16,25,36....81]
        
        L = [x**2 for x in range(1,10)]

    练习: (list_comprehension.py)
        用列表推到式生成 1-100 内所有奇数的平方的列表



        [表达式 for 变量 in 可迭代对象 if 真值表达式]
    示例:
        #以下生成一个数值为1-9的平方的列表(只保留偶数)
        #[4,16,36...]  

        L = [x**2 for x in range(1,10) if x % 2 == 0]  

    练习:(list_comprehension.py))
       1. 写程序. 输入一个开始的整数值用begin绑定
            输入一个结束的整数用end绑定
                将从begin开始到end结束的所有偶数存于列表中,并打印(建议用列表推到式)
        2. 写程序,让用户输入很多个整数(包含正整数和负整数)保有存在于列表L中,然后把列表L中的所有整数存于L1中,把列表L中所有负数存于列表L2中
        打印原列表L和整数列表L1和负数列表L2        

列表推导式的嵌套:
    [表达式1 
        for 变量1 in 可迭代对象1 if 真值表达式1
            for 变量2 in 可迭代对象2 if 真值表达式2
                ....]
    
    示例:
        将列表[10, 20 ,30] 中的元素与列表[1,2,3]
        元素分别相加,将得到的元素放于一个列表中
        L = [x+y for x in [10,20,30]
                 for y in [1,2,3]]

    练习:(list_comprehension.py)
        用字符串"ABC" 和 "123" 生成如下列表:
            ['A1','A2','A3','B1','B2','B3','C1','C2','C3']


    1.已知有一个字符串:
        s = '100,200,300,500,800'
        将其转化为数字组成的列表,列表内部为整数:
            L = [100,200,300,500,800]
    2.用列表推到式生成如下列表:
        L = [1, 4, 7, 10, ... 100]
    3.用列表推到式生成如下列表(思考题)
        [[1,2,3], [4,5,6],[7,8,9]]

作业:
    1. 有一些数存于列表中:
    L= [1,3,2,1,6,4,2,....98,82]
        1)将列表L中出现的数字存入到另一个列表L2中
        要求:
            重复出现多次的数字只在L2中保留一份(去重)
        2)将列表中出现两次的数字存在于列表L3中,在L3中只保留一份
    2.计算出100以内的全部素数,将这些素数存于列表中,然后打印出列表中的这些素数
    3.生成前40个斐波那契数列中的数:第三项为前两项之和 n >=2
       1 1 2 3 5 8 13......
       要求将这些数保存与列表中,打印这些数




















































































    


















































